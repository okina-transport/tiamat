//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.05 at 07:41:01 PM CET 
//


package no.rutebanken.tiamat.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ParkingLayoutEnumeration.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ParkingLayoutEnumeration">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="covered"/>
 *     &lt;enumeration value="openSpace"/>
 *     &lt;enumeration value="multistorey"/>
 *     &lt;enumeration value="underground"/>
 *     &lt;enumeration value="roadside"/>
 *     &lt;enumeration value="undefined"/>
 *     &lt;enumeration value="other"/>
 *     &lt;enumeration value="cycleHire"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ParkingLayoutEnumeration")
@XmlEnum
public enum ParkingLayoutEnumeration {

    @XmlEnumValue("covered")
    COVERED("covered"),
    @XmlEnumValue("openSpace")
    OPEN_SPACE("openSpace"),
    @XmlEnumValue("multistorey")
    MULTISTOREY("multistorey"),
    @XmlEnumValue("underground")
    UNDERGROUND("underground"),
    @XmlEnumValue("roadside")
    ROADSIDE("roadside"),
    @XmlEnumValue("undefined")
    UNDEFINED("undefined"),
    @XmlEnumValue("other")
    OTHER("other"),
    @XmlEnumValue("cycleHire")
    CYCLE_HIRE("cycleHire");
    private final String value;

    ParkingLayoutEnumeration(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ParkingLayoutEnumeration fromValue(String v) {
        for (ParkingLayoutEnumeration c: ParkingLayoutEnumeration.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
