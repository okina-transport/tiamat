package org.rutebanken.tiamat.importer.finder;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import org.apache.commons.lang3.StringUtils;
import org.locationtech.jts.geom.Envelope;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.geom.Point;
import org.rutebanken.tiamat.domain.Provider;
import org.rutebanken.tiamat.general.PeriodicCacheLogger;
import org.rutebanken.tiamat.importer.StopPlaceSharingPolicy;
import org.rutebanken.tiamat.model.StopPlace;
import org.rutebanken.tiamat.repository.ProviderRepository;
import org.rutebanken.tiamat.repository.StopPlaceRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

@Component
public class SimpleNearbyStopPlaceFinder {

    private static final Logger logger = LoggerFactory.getLogger(SimpleNearbyStopPlaceFinder.class);

    private final StopPlaceRepository stopPlaceRepository;

    private static final double BOUNDING_BOX_BUFFER = 0.00009;

    @Value("${stopPlace.sharing.policy}")
    protected StopPlaceSharingPolicy sharingPolicy;

    ProviderRepository providerRepository;

    /**
     * Key is generated by using stop place's name, type and envelope.
     * Value is optional NetexId
     */
    private final Cache<String, String> nearbyStopCache;

    @Autowired
    public SimpleNearbyStopPlaceFinder(StopPlaceRepository stopPlaceRepository,
                                 @Value("${nearbyStopPlaceFinderCache.maxSize:50000}") int maximumSize,
                                 @Value("${nearbyStopPlaceFinderCache.expiresAfter:30}") int expiresAfter,
                                 @Value("${nearbyStopPlaceFinderCache.expiresAfterTimeUnit:DAYS}") TimeUnit expiresAfterTimeUnit,
                                 PeriodicCacheLogger periodicCacheLogger,ProviderRepository providerRepository) {
        this.stopPlaceRepository = stopPlaceRepository;
        this.providerRepository = providerRepository;
        this.nearbyStopCache = CacheBuilder.newBuilder()
                .maximumSize(maximumSize)
                .expireAfterWrite(expiresAfter, expiresAfterTimeUnit)
                .recordStats()
                .build();

        periodicCacheLogger.scheduleCacheStatsLogging(nearbyStopCache, logger);
    }

    public Optional<StopPlace> find(StopPlace stopPlace) {

        if (stopPlace.getCentroid() == null)
            return Optional.empty();

        final String key = createKey(stopPlace);

        String stopPlaceNetexId = null;

        stopPlaceNetexId = nearbyStopCache.getIfPresent(key);

        if (StringUtils.isEmpty(stopPlaceNetexId)){
            Envelope boundingBox = createBoundingBox(stopPlace.getCentroid());
            stopPlaceNetexId = stopPlaceRepository.findNearbyStopPlace(boundingBox, stopPlace.getName().getValue(), stopPlace.getStopPlaceType(), getProviderToSearch(stopPlace));
        }

        if (StringUtils.isNotEmpty(stopPlaceNetexId)) {
            // Update cache for incoming envelope, so the same key will hopefullly match again
            nearbyStopCache.put(key, stopPlaceNetexId);
            StopPlace existingStopPlace = stopPlaceRepository.findFirstByNetexIdOrderByVersionDesc(stopPlaceNetexId);
            logger.info("Station found near stopPlace:"+stopPlace.getOriginalIds()+"("+stopPlace.getCentroid()+")");
            logger.info("Existing stopPlace:"+existingStopPlace.getOriginalIds()+"("+existingStopPlace.getCentroid()+")");
            return Optional.of(existingStopPlace);
        }
        return Optional.empty();
    }

    private Provider getProviderToSearch(StopPlace stopPlace){
        if (StopPlaceSharingPolicy.SHARED.equals(sharingPolicy)){
            //Tiamat runs on shared policy mode. StopPlace location must be searched on all provider spaces.
            return null;
        }

        //Tiamat runs on isolated mode. StopPlace must be searched only on the specified provider space
        return providerRepository.getProviders().stream()
                                                .filter(providerTmp -> providerTmp.getChouetteInfo().getReferential().equals(stopPlace.getProvider()))
                                                .findFirst()
                                                .orElseThrow(()->new RuntimeException("No provider found for code:" + stopPlace.getProvider())) ;
    }


    public final String createKey(StopPlace stopPlace, Envelope envelope) {
        if (StringUtils.isNotBlank(stopPlace.getProvider())){
            return stopPlace.getName() + "-" + stopPlace.getStopPlaceType().value() + "-" + stopPlace.getProvider() + "-" + envelope.toString();
        }
        else{
            return stopPlace.getName() + "-" + stopPlace.getStopPlaceType().value() + "-" + envelope.toString();
        }
    }

    public final String createKey(StopPlace stopPlace) {
        return createKey(stopPlace, createBoundingBox(stopPlace.getCentroid()));
    }

    public Envelope createBoundingBox(Point point) {

        Geometry buffer = point.buffer(BOUNDING_BOX_BUFFER);

        Envelope envelope = buffer.getEnvelopeInternal();
        logger.trace("Created envelope {}", envelope.toString());

        return envelope;
    }


}
